<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- 读取db.properties文件 -->
<context:property-placeholder location="classpath:db.properties"/>

<!--配置c3p0数据源  -->
<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
  <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
  <property name="driverClass" value="${jdbc.driverClass}"></property>
  <property name="user" value="${jdbc.user}"></property>
  <property name="password" value="${jdbc.password}"></property>
  <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize">
            <value>5</value>
        </property>
 <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>30</value>
        </property>
<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>10</value>
        </property>
 <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime">
            <value>60</value>
        </property>
 <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>5</value>
        </property>
 <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements">
            <value>0</value>
        </property>
 <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod">
            <value>60</value>
        </property>
 <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30-->
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
 <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
 <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性.
 建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>	
</bean>

<!-- spring核心事务管理器 -->
<bean name="transctionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager"> 
  <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<!-- 使用註解配置 -->
<tx:annotation-driven transaction-manager="transctionManager"/>

<!-- 在spring中配置hibernate -->
<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
   <property name="dataSource" ref="dataSource"></property>  
   <!-- hibernate基本配置 -->
   <property name="hibernateProperties">
     <props>
         <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
         <!-- <prop key="hibernate.show_sql">true</prop>
         <prop key="hibernate.format_sql">true</prop> -->
         <prop key="hibernate.hbm2ddl.auto">update</prop>
     </props>
   </property>
   <!-- 引入orm元数据 -->
   <property name="mappingDirectoryLocations" value="classpath:com/future/domain"></property>
</bean>



<!-- action -->
<bean name="baseAction" class="com.future.web.action.BaseAction" scope="prototype">
   <property name="userService" ref="userService"></property>
</bean>
 
<bean name="userAction" class="com.future.web.action.UserAction" scope="prototype">
  <property name="userService" ref="userService"></property>
  <property name="vehicleService" ref="vehicleService"></property>
  <property name="maintainService" ref="maintainService"></property>

</bean>



<bean name="baseDictAction" class="com.future.web.action.BaseDictAction" scope="prototype">
  <property name="baseDictService" ref="baseDictService"></property>
</bean>
 
<bean name="vehicleAction" class="com.future.web.action.VehicleAction" scope="prototype">
  <property name="userService" ref="userService"></property>
  <property name="vehicleService" ref="vehicleService"></property>
  <property name="maintainService" ref="maintainService"></property>

 </bean>
 
 <bean name="maintainAction" class="com.future.web.action.MaintainAction" scope="prototype">
  <property name="vehicleService" ref="vehicleService"></property>
  <property name="userService" ref="userService"></property>
  <property name="maintainService" ref="maintainService"></property> 

 </bean>


<!-- service -->
<bean name="userService" class="com.future.service.impl.UserServiceImpl">
    <property name="userDao" ref="userDao"></property>
</bean>


<bean name="maintainService" class="com.future.service.impl.MaintainServiceImpl">
     <property name="maintainDao" ref="maintainDao" ></property>
</bean>

<bean name="baseDictService" class="com.future.service.impl.BaseDictServiceImpl">
     <property name="baseDictDao" ref="baseDictDao" ></property>
</bean>

<bean name="vehicleService" class="com.future.service.impl.VehicleServiceImpl">
    <property name="vehicleDao" ref="vehicleDao" ></property>
</bean>

<!-- dao -->
<bean name="userDao" class="com.future.dao.impl.UserDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<bean name="maintainDao" class="com.future.dao.impl.MaintainDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<bean name="baseDictDao" class="com.future.dao.impl.BaseDictDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<bean name="vehicleDao" class="com.future.dao.impl.VehicleDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>


</beans>
